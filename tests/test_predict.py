"""Test prediction module"""


import predict

client = predict.app.test_client()


def test_convert_sample_outcome():
    """Test convert_sample_outcome function"""
    assert predict.convert_sample_outcome(1) == "Malware"
    assert predict.convert_sample_outcome(0) == "Benign"


def test_predict():
    """Test predict function"""
    benign_sample_imports = [
        'putchar',
        'sprintf_s',
        'gmtime',
        'exit',
        '_vsnprintf',
        '_strnicmp',
        'fflush',
        'malloc',
        '?terminate@@YAXXZ',
        'strcat_s',
        'fclose',
        'fopen',
        'isspace',
        'perror',
        'fread',
        'free',
        'memcpy',
        '_commode',
        '_fmode',
        '__C_specific_handler',
        '_initterm',
        'memset',
        'fputs',
        '__setusermatherr',
        'sscanf_s',
        '_cexit',
        '_exit',
        '__set_app_type',
        'strncmp',
        'printf',
        'fwrite',
        'strcpy_s',
        'putc',
        'system',
        'strchr',
        '__getmainargs',
        'fprintf',
        'getc',
        'strncpy_s',
        'getenv',
        'fputc',
        '_amsg_exit',
        '_XcptFilter',
        'fgets',
        'realloc',
        'ferror',
        '_write',
        '__iob_func',
        '_vsnprintf_s',
        'strcmp',
        'HeapFree',
        'GetProcessHeap',
        'HeapSetInformation',
        'HeapAlloc',
        'select',
        'htonl',
        'gethostname',
        'inet_ntoa',
        'getaddrinfo',
        'WSAStartup',
        'freeaddrinfo',
        'closesocket',
        'send',
        'socket',
        'connect',
        'recv',
        'WSAGetLastError',
        'getprotobynumber',
        'getservbyport',
        'ntohs',
        'htons',
        'DnsFreeConfigStructure',
        'DnsQueryConfigAllocEx',
        'SetThreadUILanguage',
        'FormatMessageA',
        'SetLastError',
        'SetUnhandledExceptionFilter',
        'UnhandledExceptionFilter',
        'GetLastError',
        'RegCloseKey',
        's_perror',
        'LocalFree',
        'Sleep',
        'RtlVirtualUnwind',
        'RtlLookupFunctionEntry',
        'RtlCaptureContext',
        'GetCurrentProcess',
        'TerminateProcess',
        'GetCurrentThreadId',
        'GetCurrentProcessId',
        'GetModuleHandleW',
        'QueryPerformanceCounter',
        'GetSystemTimeAsFileTime',
        'GetTickCount',
        'EtwTraceMessageVa',
        'RtlIpv6AddressToStringA',
        'RtlIpv6StringToAddressExA',
        'RtlIpv4StringToAddressA',
        'NtQueryValueKey',
        'RtlInitString',
        'RtlFreeHeap',
        'RtlUnicodeStringToAnsiString',
        'RtlFreeUnicodeString',
        'NtOpenKey',
        'RtlAllocateHeap',
        'RtlAnsiStringToUnicodeString',
        'ExpandEnvironmentStringsA',
        'ResolveDelayLoadedAPI',
        'DelayLoadFailureHook',
        'ApiSetQueryApiSetPresence',
    ]
    assert predict.predict(benign_sample_imports) == 0

    malware_sample_imports = [
        'FindClose',
        'lstrcmpA',
        'lstrcatA',
        'CreateFileA',
        'lstrcpyA',
        'CloseHandle',
        'LocalFree',
        'GetProcessHeap',
        'FlushFileBuffers',
        'Sleep',
        'DeleteFileA',
        'CreateThread',
        'HeapAlloc',
        'SizeofResource',
        'lstrlenA',
        'SetLastError',
        'TerminateProcess',
        'ExpandEnvironmentStringsA',
        'GetFullPathNameA',
        'FindResourceA',
        'WaitForSingleObject',
        'OpenProcess',
        'CreateToolhelp32Snapshot',
        'LockResource',
        'Process32Next',
        'LoadResource',
        'lstrcmpiA',
        'CreateProcessA',
        'FindNextFileA',
        'WriteFile',
        'HeapFree',
        'FindFirstFileA',
        'Process32First',
        'LocalAlloc',
        'SendMessageA',
        'RegOpenKeyA',
        'RegSetValueExA',
        'RegCloseKey',
        'SHCreateDirectoryExA',
        'SHChangeNotify',
        'CoInitialize',
        'CoCreateInstance',
        'SysAllocString',
        'SysFreeString',
        'PathRemoveFileSpecA',
    ]
    assert predict.predict(malware_sample_imports) == 1


def test_predict_endpoint():
    """Test predict endpoint"""

    sample = {"sample": open("data/Bonzify.exe", "rb")}
    response = client.post(
        predict.PREDICT_URL,
        data=sample,
    )
    assert response.json["Outcome"] == "Malware"

    sample = {"sample": open("data/ping.exe", "rb")}
    response = client.post(
        predict.PREDICT_URL,
        data=sample,
    )
    assert response.json["Outcome"] == "Benign"

    sample = {"sample": open("data/nslookup.exe", "rb")}
    response = client.post(
        predict.PREDICT_URL,
        data=sample,
    )
    assert response.json["Outcome"] == "Benign"

    sample = {"sample": open("data/features.bin", "rb")}
    response = client.post(
        predict.PREDICT_URL,
        data=sample,
    )
    assert "Error" in response.json

    response = client.post(predict.PREDICT_URL)
    assert "Error" in response.json
