"""Training module"""

import pickle

import numpy as np
import pandas as pd
from sklearn.metrics import f1_score, recall_score, accuracy_score, precision_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectKBest, mutual_info_classif

DATASET_PATH = "data/dataset.csv"
CORRELATION_THRESHOLD = 0.95
FEATURES_NUMBER = 50
MODEL = RandomForestClassifier
MODEL_PARAMETERS = {'bootstrap': False, 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 100}
MODEL_PATH = "data/model.bin"
FEATURES_PATH = "data/features.bin"


def read_dataset(path):
    """Dataset loading function"""
    df = pd.read_csv(path)
    return df


def prepare_dataset(df):
    """Dataset preparation function"""
    y_train = df["malware"].values
    X_train = df.drop(["hash", "malware"], axis=1)
    return X_train, y_train


def reduce_features_by_correlation(X_train, threshold):
    """Feature reduction function by correlation"""
    X_train = X_train.copy()
    cor_matrix = X_train.corr().abs()
    upper_tri = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(bool))
    to_drop = [column for column in upper_tri.columns if any(upper_tri[column] > threshold)]
    X_train = X_train.drop(to_drop, axis=1)
    return X_train


def reduce_features_by_mutual_information(X_train, y_train, K):
    """Feature reduction function by mutual information with the target variable"""
    fs = SelectKBest(score_func=mutual_info_classif, k=K)
    fs.fit(X_train, y_train)
    X_train_fs = fs.transform(X_train)
    columns = fs.get_feature_names_out(X_train.columns)
    X_train_fs = pd.DataFrame(X_train_fs, columns=columns)
    return X_train_fs


def train_model(model, params, X_train, y_train):
    """Model training function"""
    model = model(**params)
    model.fit(X_train, y_train)
    return model


def evaluate_model(model, X_train, y_train):
    """Model evaluation function"""
    y_pred = model.predict(X_train)
    print("Accuracy: ", accuracy_score(y_train, y_pred))
    print("Precision:", precision_score(y_train, y_pred))
    print("Recall:", recall_score(y_train, y_pred))
    print("F1 Score:", f1_score(y_train, y_pred))


def export_data(data, path):
    """Export data function"""
    with open(path, "wb") as f:
        pickle.dump(data, f)


def main():
    """Main function"""
    print("Loading dataset")
    df = read_dataset(path=DATASET_PATH)

    print("Preparing dataset")
    X_train, y_train = prepare_dataset(df)

    print("Reducing features by correlation")
    X_train = reduce_features_by_correlation(X_train, threshold=CORRELATION_THRESHOLD)

    print("Reducing features by mutual information")
    X_train = reduce_features_by_mutual_information(X_train, y_train, K=FEATURES_NUMBER)

    print("Training the model")
    trained_model = train_model(MODEL, MODEL_PARAMETERS, X_train, y_train)

    print("Evaluating model performance indicators")
    evaluate_model(trained_model, X_train, y_train)

    print("Exporting model and features")
    export_data(trained_model, path=MODEL_PATH)
    export_data(X_train.columns.to_list(), path=FEATURES_PATH)


if __name__ == "__main__":
    main()
