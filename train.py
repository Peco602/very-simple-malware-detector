"""Training module"""

import pickle

import pandas as pd
from sklearn.metrics import (
    f1_score,
    recall_score,
    roc_auc_score,
    accuracy_score,
    precision_score,
)
from sklearn.ensemble import RandomForestClassifier

DATASET_PATH = "data/dataset.csv"
FEATURES_PATH = "data/features.bin"
MODEL_PARAMS = {
    "n_estimators": 200,
    "min_samples_split": 4,
    "min_samples_leaf": 2,
    "max_depth": 100,
    "bootstrap": True,
}
MODEL_PATH = "data/model.bin"


def read_dataset(path):
    """Dataset loading function"""
    print("Loading dataset")
    df = pd.read_csv(path)
    return df


def read_features(path):
    """Used features loading function"""
    print("Loading selected features")
    with open(path, "rb") as f:
        features = pickle.load(f)

    return features


def prepare_dataset(df, features):
    """Dataset preparation function"""
    print("Preparing dataset")
    y_train = df["malware"].values
    X_train = df.reset_index(drop=True)
    X_train = X_train[features]
    return X_train, y_train


def train_model(X_train, y_train):
    """Model training function"""
    print("Training model")
    model = RandomForestClassifier(**MODEL_PARAMS)
    model.fit(X_train, y_train)
    return model


def evaluate_model(model, X_train, y_train):
    """Model evaluation function"""
    print("Evaluating model")
    y_pred = model.predict(X_train)
    print("Accuracy: ", accuracy_score(y_train, y_pred))
    print("Precision:", precision_score(y_train, y_pred))
    print("Recall:", recall_score(y_train, y_pred))
    print("F1 Score:", f1_score(y_train, y_pred))
    print("AUC: ", roc_auc_score(y_train, y_pred))


def export_model(model, path):
    """Export model function"""
    print("Exporting model")
    with open(path, "wb") as f:
        pickle.dump(model, f)


def main():
    """Main function"""
    df = read_dataset(path=DATASET_PATH)
    features = read_features(path=FEATURES_PATH)
    X_train, y_train = prepare_dataset(df, features)
    model = train_model(X_train, y_train)
    evaluate_model(model, X_train, y_train)
    export_model(model, path=MODEL_PATH)


if __name__ == "__main__":
    main()
