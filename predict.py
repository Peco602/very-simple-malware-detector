"""Prediction module"""

import os
import pickle

import pandas as pd
import pefile
from flask import Flask, jsonify, request

EXPERIMENT_NAME = os.getenv("EXPERIMENT_NAME", "very-simple-malware-detector")

app = Flask(EXPERIMENT_NAME)

PREDICT_URL = "/predict"
FEATURES_PATH = "data/features.bin"
MODEL_PATH = "data/model.bin"


def load_model():
    """Model loading function"""
    print("Loading model")
    with open(f"{os.path.dirname(os.path.abspath(__file__))}/{MODEL_PATH}", "rb") as f:
        loaded_model = pickle.load(f)
    return loaded_model


def load_features():
    """Features loading function"""
    print("Loading features")
    with open(
        f"{os.path.dirname(os.path.abspath(__file__))}/{FEATURES_PATH}", "rb"
    ) as f:
        loaded_features = pickle.load(f)
    return loaded_features


def get_sample_imports(file):
    """Gets all the sample imports"""
    try:
        pe = pefile.PE(data=file)
        imports = []
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            for imp in entry.imports:
                imports.append(imp.name.decode("utf-8"))
        return imports
    except Exception as e:
        return e


def predict(sample_imports):
    """Predicts the sample behavior"""
    record = {}
    for f in features:
        if f in sample_imports:
            record[f] = 1
        else:
            record[f] = 0
    preds = [round(x) for x in model.predict(pd.DataFrame([record]))]
    return preds[0]


def convert_sample_outcome(sample_outcome):
    """Converts the outcome into string"""
    if sample_outcome == 1:
        return "Malware"

    return "Benign"


model = load_model()
features = load_features()


@app.route(PREDICT_URL, methods=["POST"])
def predict_endpoint():
    """Prediction endpoint"""
    try:
        uploaded_sample = request.files['sample']
        if uploaded_sample.filename != '':
            print(f"Received sample {uploaded_sample.filename}")
            sample_imports = get_sample_imports(uploaded_sample.read())

            if isinstance(sample_imports, list):
                sample_outcome = predict(sample_imports)
                return jsonify({"Outcome": convert_sample_outcome(sample_outcome)})

            return jsonify({"Error": str(sample_imports)})

    except Exception as e:
        return jsonify({"Error": str(e)})

    return jsonify({"Error": "Generic error"})


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=8080)
